import requests
from typing import Dict, Optional
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
from utils import logger

class TelegramBot:
    def __init__(self):
        # Initialize the Telegram bot with the API base URL
        self.base_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
        logger.info("Telegram bot initialized")

    def _send_request(self, payload: Dict) -> bool:
        """Core request handler with retry logic"""
        try:
            # Send a POST request to the Telegram API to send a message
            response = requests.post(
                f"{self.base_url}/sendMessage",
                json=payload,
                timeout=10
            )
            response.raise_for_status()  # Raise exception for HTTP errors
            return True
        except Exception as e:
            # Log any errors that occur during the request
            logger.error(f"Telegram send failed: {str(e)}")
            return False

    def send_signal(self, signal: Dict) -> None:
        """Format and send trading signal"""
        # Format the signal into a message
        message = self._format_message(signal)
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown",
            "disable_notification": True,
            "protect_content": False  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        }
        
        # Attempt to send the message and log the result
        if self._send_request(payload):
            logger.info(f"Sent Telegram alert: {signal.get('pair', signal.get('ticker', 'N/A'))} {signal.get('timeframe', 'N/A')}")
        else:
            logger.warning(f"Failed to send: {signal.get('pair', signal.get('ticker', 'N/A'))}")
    
    def send_error(self, error_message: str, signal_data: Dict) -> None:
        """üö® –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        message = f"""üö® *–û–®–ò–ë–ö–ê –û–†–î–ï–†–ê* üö®

üìä *–°–∏–º–≤–æ–ª:* {signal_data.get('ticker', 'N/A')}
üéØ *–°–∏–≥–Ω–∞–ª:* {signal_data.get('signal', 'N/A')}
üí∞ *–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* {signal_data.get('entry_price', 'N/A')}

‚ùå *–û—à–∏–±–∫–∞:* {error_message}

‚è∞ *–í—Ä–µ–º—è:* {signal_data.get('timestamp', 'N/A')}"""
        
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown",
            "disable_notification": False,
            "protect_content": True  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        }
        
        if self._send_request(payload):
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram")

    def send_message(self, message: str, parse_mode: str = "HTML") -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": parse_mode,
            "disable_notification": False,
            "protect_content": True  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        }
        
        if self._send_request(payload):
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")

    @staticmethod
    def _format_message(signal: Dict) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–ø–∏—Ç–∞–ª–µ"""
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ
        message = (
            f"üöÄ *{signal.get('pair', signal.get('ticker', 'N/A'))} {signal.get('timeframe', 'N/A')}*\n"
            f"üìç Direction: {signal['signal']}\n"
            f"üí∞ Price: `{signal.get('current_price', signal.get('entry_price', 0))}`\n"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∫–∞–ø–∏—Ç–∞–ª–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if 'quantity' in signal:
            message += f"üì¶ Position: `{signal['quantity']:.6f}`\n"
        if 'leverage' in signal:
            message += f"‚ö° Leverage: `{signal['leverage']}x`\n"
        if 'capital_at_risk' in signal:
            message += f"üí∏ Capital at Risk: `{signal['capital_at_risk']}`\n"
        if 'position_value' in signal:
            message += f"üìä Position Value: `{signal['position_value']:.2f} USDT`\n"
        if 'total_balance' in signal:
            message += f"üí≥ Total Balance: `{signal['total_balance']:.2f} USDT`\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if 'confidence' in signal:
            message += f"üìà Confidence: {signal['confidence']*100:.1f}%\n"
        if 'order_type' in signal:
            message += f"üìã Order Type: `{signal['order_type']}`\n"
        if 'order_id' in signal:
            message += f"üÜî Order ID: `{signal['order_id']}`\n"
        if 'stop_order_id' in signal and signal['stop_order_id'] != 'FAILED':
            message += f"üõë Stop Order ID: `{signal['stop_order_id']}`\n"
        if 'tp_order_id' in signal and signal['tp_order_id'] != 'FAILED':
            message += f"üéØ TP Order ID: `{signal['tp_order_id']}`\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ stop/take (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if signal.get('stop_loss', 0) > 0:
            message += f"üõë Stop: `{signal['stop_loss']}`\n"
        if signal.get('take_profit', 0) > 0:
            message += f"üéØ Target: `{signal['take_profit']}`\n"

        # –î–æ–±–∞–≤–ª—è–µ–º Risk/Reward Ratio
        if 'risk_reward' in signal:
            message += f"‚öñÔ∏è Risk/Reward: `{signal['risk_reward']}`\n"
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        if 'timestamp' in signal:
            from datetime import datetime
            try:
                if isinstance(signal['timestamp'], (int, float)):
                    dt = datetime.fromtimestamp(signal['timestamp'])
                    message += f"‚è±Ô∏è {dt.strftime('%H:%M:%S')}"
                else:
                    message += f"‚è±Ô∏è {signal['timestamp']}"
            except:
                message += f"‚è±Ô∏è {signal.get('timestamp', 'N/A')}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π
        if 'dominance_change_percent' in signal:
            message += f"\nüîç Dominance Change: {signal.get('dominance_change_percent', 0):.2f}%"
        
        return message

# Singleton instance of the TelegramBot class for use throughout the project
telegram_bot = TelegramBot()