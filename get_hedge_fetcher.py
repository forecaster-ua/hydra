#!/usr/bin/env python3
"""
Scheduled Hedge Entry Generator
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ö–µ–¥–∂-—Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram.

–ê–ª–≥–æ—Ä–∏—Ç–º —Ç–∞–π–º–µ—Ä–∞ (–∫—Ä–∞—Ç–Ω–æ—Å—Ç—å –æ—Ç 00:00 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è):
- TZ: Europe/Kyiv
- –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç (900 —Å–µ–∫—É–Ω–¥)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ü–∏—é 2 (–∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
"""

import time
import datetime
import math
import sys
import os
import subprocess
from pathlib import Path
import signal
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞"""
    handlers = []
    
    # –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
    handlers.append(logging.FileHandler('hedge_scheduler.log'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º StreamHandler —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã —á–µ—Ä–µ–∑ nohup/service
    # (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ TTY - —Ç–µ—Ä–º–∏–Ω–∞–ª)
    if sys.stdout.isatty():
        handlers.append(logging.StreamHandler())
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=handlers
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()

class HedgeScheduler:
    def __init__(self, interval_minutes=15, timezone='Europe/Kyiv'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        
        Args:
            interval_minutes (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
            timezone (str): –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
        """
        self.interval_seconds = interval_minutes * 60
        self.timezone = timezone
        self.script_path = Path(__file__).parent / "get_hedge_entry_generator.py"
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        logging.info(f"üöÄ Hedge Scheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logging.info(f"   üìç –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω—É—Ç ({self.interval_seconds} —Å–µ–∫—É–Ω–¥)")
        logging.info(f"   üåç –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {timezone}")
        logging.info(f"   üìÇ –°–∫—Ä–∏–ø—Ç: {self.script_path}")
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logging.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
        self.running = False
        
    def get_local_midnight_timestamp(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç timestamp –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–ª—É–Ω–æ—á–∏ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            os.environ['TZ'] = self.timezone
            time.tzset()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            now = datetime.datetime.now()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É–Ω–æ—á—å —Å–µ–≥–æ–¥–Ω—è (00:00:00)
            midnight = now.replace(hour=0, minute=0, second=0, microsecond=0)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp
            return midnight.timestamp()
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—É–Ω–æ—á–∏: {e}")
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è
            now = time.time()
            midnight = now - (now % 86400)  # 86400 —Å–µ–∫—É–Ω–¥ –≤ –¥–Ω–µ
            return midnight
            
    def calculate_next_tick(self) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–æ–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É
        
        Returns:
            float: Timestamp —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        now = time.time()
        midnight = self.get_local_midnight_timestamp()
        elapsed = now - midnight
        step = self.interval_seconds
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª–∏ –ª–∏ –º—ã —Ä–æ–≤–Ω–æ –≤ –∫—Ä–∞—Ç–Ω—É—é —Ç–æ—á–∫—É
        if elapsed % step == 0:
            next_tick = now
            logging.info("üéØ –ü–æ–ø–∞–ª–∏ —Ä–æ–≤–Ω–æ –≤ –∫—Ä–∞—Ç–Ω—É—é —Ç–æ—á–∫—É - –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
        else:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫—Ä–∞—Ç–Ω—É—é —Ç–æ—á–∫—É
            next_tick = midnight + math.ceil(elapsed / step) * step
            
        return next_tick
        
    def format_time(self, timestamp: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        os.environ['TZ'] = self.timezone
        time.tzset()
        
        dt = datetime.datetime.fromtimestamp(timestamp)
        return dt.strftime("%Y-%m-%d %H:%M:%S %Z")
        
    def run_hedge_analyzer(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ö–µ–¥–∂-—Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.script_path.exists():
            logging.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.script_path}")
            return False
            
        try:
            logging.info("üîç –ó–∞–ø—É—Å–∫ hedge analyzer...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ñ–ª–∞–≥–æ–º batch
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º python3 —è–≤–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            python_exe = "python3" if sys.executable.endswith("python") else sys.executable
            cmd = [python_exe, str(self.script_path), "--batch"]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
            process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=self.script_path.parent
            )
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã:
                # "2" - –≤—ã–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏—é 2 (–∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤)  
                # "y" - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
                input_sequence = "2\ny\n"
                
                stdout, stderr = process.communicate(input=input_sequence, timeout=300)  # 5 –º–∏–Ω—É—Ç timeout
                
                if process.returncode == 0:
                    logging.info("‚úÖ Hedge analyzer –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏ –≤—ã–≤–æ–¥–∞
                    if "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω" in stdout:
                        logging.info("üìä –ê–Ω–∞–ª–∏–∑ —Ç–∏–∫–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
                        
                    if "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram" in stdout or "—Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" in stdout:
                        logging.info("üì± –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram")
                        
                    return True
                else:
                    logging.error(f"‚ùå Hedge analyzer –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {process.returncode})")
                    if stderr:
                        logging.error(f"STDERR: {stderr}")
                    return False
                    
            except subprocess.TimeoutExpired:
                logging.error("‚è±Ô∏è Timeout: hedge analyzer –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ")
                process.kill()
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ hedge analyzer: {e}")
            return False
            
    def run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logging.info("üéØ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ hedge signals...")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        next_tick = self.calculate_next_tick()
        
        while self.running:
            try:
                current_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
                if current_time >= next_tick:
                    execution_time = self.format_time(next_tick)
                    logging.info(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    success = self.run_hedge_analyzer()
                    
                    if success:
                        logging.info("‚úÖ –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logging.warning("‚ö†Ô∏è –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    next_tick += self.interval_seconds
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
                    current_after_execution = time.time()
                    if current_after_execution > next_tick:
                        # –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ - –ø—Ä—ã–≥–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç
                        midnight = self.get_local_midnight_timestamp()
                        elapsed = current_after_execution - midnight
                        next_tick = midnight + math.ceil(elapsed / self.interval_seconds) * self.interval_seconds
                        logging.warning(f"‚ö†Ô∏è –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä—ã–≥–∞–µ–º –Ω–∞ {self.format_time(next_tick)}")
                    
                    next_execution = self.format_time(next_tick)
                    logging.info(f"‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {next_execution}")
                
                # –°–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)
                time.sleep(10)
                
            except KeyboardInterrupt:
                logging.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                break
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(30)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                
        logging.info("üèÅ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ hedge signals –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    interval_minutes = 15  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç
    
    if len(sys.argv) > 1:
        try:
            interval_minutes = int(sys.argv[1])
            if interval_minutes <= 0:
                raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 get_hedge.py [–∏–Ω—Ç–µ—Ä–≤–∞–ª_–≤_–º–∏–Ω—É—Ç–∞—Ö]")
            print("–ü—Ä–∏–º–µ—Ä: python3 get_hedge.py 15")
            sys.exit(1)
    
    print(f"""
üîÑ Hedge Signals Scheduler
=========================
üìç –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω—É—Ç
üåç –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: Europe/Kyiv
üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}

–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C
    """)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = HedgeScheduler(interval_minutes=interval_minutes)
    
    try:
        scheduler.run_scheduler()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
