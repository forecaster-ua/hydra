#!/usr/bin/env python3
"""
Symbol Cache Manager - –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö
===========================================================================

–§–£–ù–ö–¶–ò–û–ù–ê–õ:
‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ Binance API
‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ tick_size –∏ step_size
‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω/–∫–æ–ª–∏—á–µ—Å—Ç–≤

Author: HEDGER
Version: 1.0
"""

import json
import os
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_HALF_UP
from binance.client import Client
from binance.exceptions import BinanceAPIException

from utils import logger
import config

class SymbolCache:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–∞—Ö"""
    
    def __init__(self, cache_file: str = "symbol_filters.json", cache_duration_hours: int = 24):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            cache_file: –ò–º—è —Ñ–∞–π–ª–∞ –∫—ç—à–∞
            cache_duration_hours: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —á–∞—Å–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24—á)
        """
        self.cache_file = cache_file
        self.cache_duration = timedelta(hours=cache_duration_hours)
        self.cache_data: Dict = {}
        self.binance_client = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞
        self._init_binance_client()
        
        logger.info(f"üìä Symbol Cache initialized (cache: {cache_file}, duration: {cache_duration_hours}h)")
    
    def _init_binance_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if not config.BINANCE_API_KEY or not config.BINANCE_API_SECRET:
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Binance")
                return
            
            self.binance_client = Client(
                api_key=config.BINANCE_API_KEY,
                api_secret=config.BINANCE_API_SECRET,
                testnet=config.BINANCE_TESTNET
            )
            
            logger.info(f"‚úÖ Binance –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({'TESTNET' if config.BINANCE_TESTNET else 'MAINNET'})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Binance: {e}")
    
    def _load_tickers_from_file(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ tickers.txt"""
        try:
            if not os.path.exists("tickers.txt"):
                logger.warning("‚ö†Ô∏è –§–∞–π–ª tickers.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
                return ["BTCUSDT", "ETHUSDT", "NKNUSDT"]
            
            with open("tickers.txt", "r", encoding="utf-8") as f:
                content = f.read()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
            import re
            symbols = re.findall(r"'([A-Z]+USDT)'", content)
            
            if not symbols:
                # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                symbols = re.findall(r'"([A-Z]+USDT)"', content)
            
            if not symbols:
                # –ü—Ä–æ–±—É–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
                lines = content.strip().split('\n')
                symbols = [line.strip().strip("'\"") for line in lines 
                          if line.strip() and not line.startswith('#') and 'USDT' in line]
            
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ tickers.txt")
            return symbols
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ tickers.txt: {e}")
            return ["BTCUSDT", "ETHUSDT", "NKNUSDT"]  # Fallback
    
    def _is_cache_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞"""
        if not os.path.exists(self.cache_file):
            return False
        
        try:
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            cache_time = datetime.fromisoformat(data.get('timestamp', '1970-01-01'))
            return datetime.now() - cache_time < self.cache_duration
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: {e}")
            return False
    
    def _fetch_symbol_filters(self, symbols: List[str]) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤ —Å Binance API"""
        if not self.binance_client:
            logger.error("‚ùå Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return {}
        
        try:
            logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤ —Å Binance...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏—Ä–∂–µ
            exchange_info = self.binance_client.futures_exchange_info()
            
            filters_data = {
                'timestamp': datetime.now().isoformat(),
                'symbols': {}
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
            found_count = 0
            for symbol_info in exchange_info['symbols']:
                symbol = symbol_info['symbol']
                
                if symbol in symbols:
                    found_count += 1
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                    price_filter = None
                    lot_size_filter = None
                    
                    for filter_info in symbol_info['filters']:
                        if filter_info['filterType'] == 'PRICE_FILTER':
                            price_filter = filter_info
                        elif filter_info['filterType'] == 'LOT_SIZE':
                            lot_size_filter = filter_info
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    filters_data['symbols'][symbol] = {
                        'status': symbol_info['status'],
                        'tick_size': price_filter['tickSize'] if price_filter else "0.01",
                        'min_price': price_filter['minPrice'] if price_filter else "0.0",
                        'max_price': price_filter['maxPrice'] if price_filter else "0.0",
                        'step_size': lot_size_filter['stepSize'] if lot_size_filter else "0.001",
                        'min_qty': lot_size_filter['minQty'] if lot_size_filter else "0.0",
                        'max_qty': lot_size_filter['maxQty'] if lot_size_filter else "0.0",
                        'precision_price': len(str(price_filter['tickSize']).split('.')[-1].rstrip('0')) if price_filter else 2,
                        'precision_qty': len(str(lot_size_filter['stepSize']).split('.')[-1].rstrip('0')) if lot_size_filter else 3
                    }
            
            # –î–æ–±–∞–≤–ª—è–µ–º leverage brackets –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ leverage brackets –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤...")
            leverage_loaded = 0
            
            for symbol in filters_data['symbols'].keys():
                try:
                    brackets = self.binance_client.futures_leverage_bracket(symbol=symbol)
                    if brackets and len(brackets) > 0:
                        symbol_brackets = brackets[0].get('brackets', [])
                        if symbol_brackets:
                            # –î–æ–±–∞–≤–ª—è–µ–º leverage brackets –≤ –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞
                            filters_data['symbols'][symbol]['leverage_brackets'] = symbol_brackets
                            leverage_loaded += 1
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å leverage brackets –¥–ª—è {symbol}: {e}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
                    filters_data['symbols'][symbol]['leverage_brackets'] = [
                        {'initialLeverage': 20, 'notionalCap': 50000, 'maintMarginRatio': 0.05}
                    ]
            
            logger.info(f"‚úÖ Leverage brackets –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {leverage_loaded}/{len(filters_data['symbols'])} —Å–∏–º–≤–æ–ª–æ–≤")
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {found_count}/{len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            return filters_data
            
        except BinanceAPIException as e:
            logger.error(f"‚ùå Binance API Error: {e}")
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return {}
    
    def _save_cache(self, data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.cache_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def _load_cache(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            return {}
    
    def update_cache(self, force: bool = False) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –∫—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
        """
        try:
            if not force and self._is_cache_valid():
                logger.info("‚úÖ –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                self.cache_data = self._load_cache()
                return True
            
            logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–∏–º–≤–æ–ª–æ–≤...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
            symbols = self._load_tickers_from_file()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filters_data = self._fetch_symbol_filters(symbols)
            
            if filters_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
                self._save_cache(filters_data)
                self.cache_data = filters_data
                
                logger.info(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ ({len(filters_data.get('symbols', {}))} —Å–∏–º–≤–æ–ª–æ–≤)")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            return False
    
    def get_symbol_info(self, symbol: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –∏–∑ –∫—ç—à–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä 'BTCUSDT')
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–º–≤–æ–ª–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not self.cache_data:
            if not self.update_cache():
                return None
        
        return self.cache_data.get('symbols', {}).get(symbol.upper())
    
    def round_price(self, symbol: str, price: float) -> float:
        """
        –û–∫—Ä—É–≥–ª—è–µ—Ç —Ü–µ–Ω—É —Å–æ–≥–ª–∞—Å–Ω–æ tick_size —Å–∏–º–≤–æ–ª–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            price: –¶–µ–Ω–∞ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            
        Returns:
            float: –û–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞
        """
        info = self.get_symbol_info(symbol)
        if not info:
            # Fallback –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
            if 'BTC' in symbol:
                return round(price, 1)
            return round(price, 2)
        
        try:
            tick_size = Decimal(str(info['tick_size']))
            price_decimal = Decimal(str(price))
            rounded = (price_decimal / tick_size).quantize(Decimal('1'), rounding=ROUND_HALF_UP) * tick_size
            return float(rounded)
        except:
            # Fallback –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            precision = info.get('precision_price', 2)
            return round(price, precision)
    
    def round_quantity(self, symbol: str, quantity: float) -> float:
        """
        –û–∫—Ä—É–≥–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ step_size —Å–∏–º–≤–æ–ª–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            
        Returns:
            float: –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        """
        info = self.get_symbol_info(symbol)
        if not info:
            # Fallback –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
            if 'BTC' in symbol:
                return round(quantity, 3)
            return round(quantity, 6)
        
        try:
            step_size = Decimal(str(info['step_size']))
            qty_decimal = Decimal(str(quantity))
            rounded = (qty_decimal / step_size).quantize(Decimal('1'), rounding=ROUND_HALF_UP) * step_size
            return float(rounded)
        except:
            # Fallback –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            precision = info.get('precision_qty', 3)
            return round(quantity, precision)
    
    def validate_order_params(self, symbol: str, price: float, quantity: float) -> Tuple[float, float, bool]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            price: –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–∞
            
        Returns:
            Tuple[float, float, bool]: (–æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è_—Ü–µ–Ω–∞, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å)
        """
        info = self.get_symbol_info(symbol)
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        rounded_price = self.round_price(symbol, price)
        rounded_quantity = self.round_quantity(symbol, quantity)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if info:
            min_price = float(info['min_price']) if isinstance(info['min_price'], str) else info['min_price']
            max_price = float(info['max_price']) if isinstance(info['max_price'], str) else info['max_price']
            min_qty = float(info['min_qty']) if isinstance(info['min_qty'], str) else info['min_qty']
            max_qty = float(info['max_qty']) if isinstance(info['max_qty'], str) else info['max_qty']
            
            is_valid = (
                min_price <= rounded_price <= max_price and
                min_qty <= rounded_quantity <= max_qty
            )
        else:
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            is_valid = rounded_price > 0 and rounded_quantity > 0
        
        return rounded_price, rounded_quantity, is_valid
    
    def get_cache_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        if not self.cache_data:
            return {'cached_symbols': 0, 'cache_age': 'No cache', 'cache_valid': False}
        
        try:
            cache_time = datetime.fromisoformat(self.cache_data.get('timestamp', '1970-01-01'))
            age = datetime.now() - cache_time
            
            return {
                'cached_symbols': len(self.cache_data.get('symbols', {})),
                'cache_age': str(age),
                'cache_valid': age < self.cache_duration,
                'cache_file': self.cache_file,
                'last_update': self.cache_data.get('timestamp', 'Unknown')
            }
        except:
            return {'cached_symbols': 0, 'cache_age': 'Invalid', 'cache_valid': False}

    def get_leverage_brackets(self, symbol: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç leverage brackets –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏–∑ –∫—ç—à–∞"""
        if not self.cache_data:
            if not self.update_cache():
                return []
        
        symbol_info = self.cache_data['symbols'].get(symbol, {})
        return symbol_info.get('leverage_brackets', [])

    def calculate_optimal_leverage(self, symbol: str, notional_value: float, default_leverage: int = 20) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
            notional_value: –ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (quantity √ó price)
            default_leverage: –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–ª–µ—á–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            
        Returns:
            int: –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        """
        brackets = self.get_leverage_brackets(symbol)
        
        if not brackets:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ leverage brackets –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–ª–µ—á–æ {default_leverage}x")
            return default_leverage
        
        # –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã
        max_leverage = default_leverage
        
        for bracket in brackets:
            notional_cap = float(bracket.get('notionalCap', 0))
            initial_leverage = int(bracket.get('initialLeverage', 1))
            
            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —ç—Ç–æ—Ç bracket
            if notional_value <= notional_cap:
                max_leverage = initial_leverage
                break
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ
        optimal_leverage = min(default_leverage, max_leverage)
        
        if optimal_leverage != default_leverage:
            logger.info(f"üìä {symbol}: –ø–ª–µ—á–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å {default_leverage}x –Ω–∞ {optimal_leverage}x –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${notional_value:,.0f}")
        
        return optimal_leverage

    def get_leverage_info(self, symbol: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ—á–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ min/max –ø–ª–µ—á–µ –∏ brackets
        """
        brackets = self.get_leverage_brackets(symbol)
        
        if not brackets:
            return {
                'min_leverage': 1,
                'max_leverage': 20,
                'brackets': [],
                'available': False
            }
        
        min_leverage = min(bracket['initialLeverage'] for bracket in brackets)
        max_leverage = max(bracket['initialLeverage'] for bracket in brackets)
        
        return {
            'min_leverage': min_leverage,
            'max_leverage': max_leverage,
            'brackets': brackets,
            'available': True
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞ (Singleton pattern)
_symbol_cache_instance = None

def get_symbol_cache() -> SymbolCache:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞ —Å–∏–º–≤–æ–ª–æ–≤ (Singleton)"""
    global _symbol_cache_instance
    if _symbol_cache_instance is None:
        _symbol_cache_instance = SymbolCache()
    return _symbol_cache_instance


# Convenience —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def round_price_for_symbol(symbol: str, price: float) -> float:
    """–ë—ã—Å—Ç—Ä–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    return get_symbol_cache().round_price(symbol, price)

def round_quantity_for_symbol(symbol: str, quantity: float) -> float:
    """–ë—ã—Å—Ç—Ä–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    return get_symbol_cache().round_quantity(symbol, quantity)

def validate_order_for_symbol(symbol: str, price: float, quantity: float) -> Tuple[float, float, bool]:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    return get_symbol_cache().validate_order_params(symbol, price, quantity)

def calculate_leverage_for_symbol(symbol: str, notional_value: float, default_leverage: int = 20) -> int:
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ—á–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    return get_symbol_cache().calculate_optimal_leverage(symbol, notional_value, default_leverage)

def get_leverage_info_for_symbol(symbol: str) -> Dict:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ—á–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    return get_symbol_cache().get_leverage_info(symbol)


# –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∞
def test_symbol_cache():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
    logger.info("üß™ === –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ö–≠–®–ê –°–ò–ú–í–û–õ–û–í ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
        cache = SymbolCache()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞...")
        success = cache.update_cache(force=True)
        
        if not success:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = cache.get_cache_stats()
        logger.info(f"üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê ===")
        logger.info(f"   –°–∏–º–≤–æ–ª–æ–≤ –≤ –∫—ç—à–µ: {stats['cached_symbols']}")
        logger.info(f"   –í–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞: {stats['cache_age']}")
        logger.info(f"   –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω: {stats['cache_valid']}")
        logger.info(f"   –§–∞–π–ª: {stats['cache_file']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
        test_symbols = ['BTCUSDT', 'ETHUSDT', 'NKNUSDT']
        test_price = 50000.12345
        test_quantity = 0.12345678
        
        logger.info(f"üß™ === –¢–ï–°–¢ –û–ö–†–£–ì–õ–ï–ù–ò–Ø ===")
        for symbol in test_symbols:
            info = cache.get_symbol_info(symbol)
            if info:
                rounded_price = cache.round_price(symbol, test_price)
                rounded_qty = cache.round_quantity(symbol, test_quantity)
                valid_price, valid_qty, is_valid = cache.validate_order_params(symbol, test_price, test_quantity)
                
                logger.info(f"   {symbol}:")
                logger.info(f"     Tick Size: {info['tick_size']}")
                logger.info(f"     Step Size: {info['step_size']}")
                logger.info(f"     {test_price:.8f} ‚Üí {rounded_price:.8f}")
                logger.info(f"     {test_quantity:.8f} ‚Üí {rounded_qty:.8f}")
                logger.info(f"     –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {is_valid}")
            else:
                logger.warning(f"   {symbol}: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        logger.info("‚úÖ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")


if __name__ == "__main__":
    test_symbol_cache()
