"""
Environment loader for PATRIOT Trading System
============================================

Loads environment variables from .env file if available
"""

import os
from pathlib import Path

def load_env_file(env_file_path: str = ".env"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
    
    Args:
        env_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    env_file = Path(env_file_path)
    
    if not env_file.exists():
        print(f"‚ö†Ô∏è  Environment file not found: {env_file_path}")
        return False
    
    try:
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not line or line.startswith('#'):
                    continue
                
                # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                    if key and not os.getenv(key):
                        os.environ[key] = value
        
        print(f"‚úÖ Environment variables loaded from {env_file_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error loading environment file: {e}")
        return False

def reload_env_config(env_file_path: str = ".env") -> bool:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
    –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Args:
        env_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    env_file = Path(env_file_path)
    
    if not env_file.exists():
        print(f"‚ö†Ô∏è  Environment file not found for reload: {env_file_path}")
        return False
    
    try:
        updated_vars = []
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not line or line.startswith('#'):
                    continue
                
                # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    if key:
                        old_value = os.getenv(key)
                        os.environ[key] = value
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if old_value != value:
                            updated_vars.append(f"{key}: {old_value} ‚Üí {value}")
        
        if updated_vars:
            print(f"üîÑ Environment config reloaded with changes:")
            for change in updated_vars:
                print(f"   ‚Ä¢ {change}")
        else:
            print(f"‚úÖ Environment config reloaded (no changes)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error reloading environment file: {e}")
        return False

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    load_env_file()
