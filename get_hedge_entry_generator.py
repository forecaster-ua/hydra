import requests
from statistics import mean
from typing import Dict, List, Set, Optional, Tuple
import json
from collections import Counter
import os
from datetime import datetime
from pathlib import Path

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
test_tickers = ["BTCUSDT", "AVAXUSDT", "TONUSDT", "CRVUSDT", "ETHUSDT"]


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telegram_bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    from telegram_bot import telegram_bot
    TELEGRAM_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è telegram_bot –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    TELEGRAM_AVAILABLE = False
    telegram_bot = None

# –§–æ—Ä–º–∏—Ä—É–µ–º api_client –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
class MultiSignalAnalyzer:
    def __init__(self, ticker: str):
        self.ticker = ticker
        self.timeframes = ["1h", "4h", "1d"]
        self.api_url = "http://194.135.94.212:8001/multi_signal"
        
    def get_multi_signals(self) -> Tuple[Optional[List[Dict]], float]:
        """–ü–æ–ª—É—á–∞–µ–º –º—É–ª—å—Ç–∏-—Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
        import time
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        start_time = time.time()
        response_time = 0.0
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ timeframes
            url_parts = [f"{self.api_url}?pair={self.ticker}"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            for tf in self.timeframes:
                url_parts.append(f"timeframes={tf}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ
            url_parts.extend([
                "lang=uk",
                "model_type=xgb"
            ])
            
            full_url = "&".join(url_parts)
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            request_start = time.time()
            response = requests.get(full_url, timeout=30)
            request_end = time.time()
            response_time = round(request_end - request_start, 2)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                if not isinstance(data, list):
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                    return None, response_time
                
                return data, response_time
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return None, response_time
                
        except Exception as e:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–∞–∂–µ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
            error_time = time.time()
            response_time = round(error_time - start_time, 2)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return None, response_time

    def format_confidence(self, confidence: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç confidence —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–º –∑–Ω–∞—á–∫–æ–º –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        if confidence > 90:
            return f"{confidence}% ‚ö†Ô∏è ({confidence}%)"
        return f"{confidence}%"

    def format_telegram_message(self, parsed_signals: Dict, dominant_direction: str, corrections: List[Dict], opposite_mains: List[Dict], response_time: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        message = f"üìä –ê–Ω–∞–ª–∏–∑: {self.ticker}\n"
        message += "--------------------------------------------------\n"
        message += f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: {response_time}—Å\n"
        message += f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {self.ticker}:\n"
        message += f"–ü—Ä–æ—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(parsed_signals['simple'])}\n"
        message += f"–°–ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(parsed_signals['complex'])}\n\n"
        
        # –î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        message += f"üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {dominant_direction}\n\n"
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        message += f"üìà <b>–ü–†–û–°–¢–´–ï –°–ò–ì–ù–ê–õ–´:</b>\n"
        for signal in parsed_signals['simple']:
            message += f"   {signal['timeframe']}: {signal['signal']} @ {signal['entry_price']} "
            message += f"(TP: {signal['take_profit']}, SL: {signal['stop_loss']}, "
            message += f"Conf: {self.format_confidence(signal['confidence'])})\n"
        message += "\n"
        
        # –°–ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        message += f"<b>üîÑ –°–õ–û–ñ–ù–´–ï –°–ò–ì–ù–ê–õ–´:</b>\n"
        for signal in parsed_signals['complex']:
            main = signal['main_signal']
            corr = signal['correction_signal']
            message += f"   {signal['timeframe']}:\n"
            message += f"      Main: {main['type']} @ {main['entry']} "
            message += f"(TP: {main['tp']}, SL: {main['sl']}, Conf: {self.format_confidence(main['confidence'])})\n"
            message += f"      Correction: {corr['type']} @ {corr['entry']} "
            message += f"(TP: {corr['tp']}, SL: {corr['sl']}, Conf: {self.format_confidence(corr['confidence'])})\n"
        message += "\n"
        
        # –í–∞–∂–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ç—Ä–µ–Ω–¥–æ–≤—ã–µ main —Å–∏–≥–Ω–∞–ª—ã
        if opposite_mains:
            message += f"<b>üö® –í–ê–ñ–ù–´–ï –ü–†–û–¢–ò–í–û–¢–†–ï–ù–î–û–í–´–ï MAIN –°–ò–ì–ù–ê–õ–´ ({len(opposite_mains)} –Ω–∞–π–¥–µ–Ω–æ):</b>\n"
            for signal in opposite_mains:
                message += f"   {signal['timeframe']}: {signal['direction']} @ {signal['entry_price']} "
                message += f"{self.format_confidence(signal['confidence'])} - –°–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ç–∏–≤ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ {dominant_direction}\n"
            message += "\n"
        
        # –ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        if corrections:
            message += f"‚ö†Ô∏è  <b>–ö–û–†–†–ï–ö–¶–ò–û–ù–ù–´–ï –°–î–ï–õ–ö–ò</b> ({len(corrections)} –Ω–∞–π–¥–µ–Ω–æ):\n\n"
            
            for i, correction in enumerate(corrections, 1):
                message += f"   üìç –ö–æ—Ä—Ä–µ–∫—Ü–∏—è #{i} ({correction['timeframe']}, {correction['type']}):\n"
                message += f"      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {correction['direction']} "
                message += f"(–ø—Ä–æ—Ç–∏–≤ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ {dominant_direction})\n"
                message += f"      –í—Ö–æ–¥: {correction['entry_price']}\n"
                message += f"      TP: {correction['take_profit']}\n"
                message += f"      SL: {correction['stop_loss']}\n"
                message += f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.format_confidence(correction['confidence'])}\n"
                message += f"      R/R: {correction['risk_reward']}\n"
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—ã
                potentials = self.calculate_potentials_to_levels(correction, parsed_signals, dominant_direction)
                
                if potentials:
                    message += f"      \n      <b>üéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–´ –ö –£–†–û–í–ù–Ø–ú –ö–†–£–ü–ù–´–• –¢–§:</b>\n"
                    for j, pot in enumerate(potentials[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
                        message += f"         {j}. {pot['timeframe']} ({pot['level_type']}): "
                        message += f"{pot['level_value']} = {pot['potential_percent']}% "
                        message += f"({pot['direction']})\n"
                else:
                    message += f"      ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤\n"
                message += "\n"
        else:
            message += f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
            message += f"   –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é: {dominant_direction}\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        message += f"üöÄ <b>–û–°–ù–û–í–ù–´–ï –°–ò–ì–ù–ê–õ–´ –ü–û –î–û–ú–ò–ù–ò–†–£–Æ–©–ï–ú–£ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Æ</b> ({dominant_direction}):\n"
        
        # –ò–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal in parsed_signals['simple']:
            if signal['signal'] == dominant_direction:
                message += f"   {signal['timeframe']}: {signal['signal']} @ {signal['entry_price']} "
                message += f"(Conf: {self.format_confidence(signal['confidence'])})\n"
        
        # –ò–∑ main —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–ª–æ–∂–Ω—ã—Ö
        for signal in parsed_signals['complex']:
            main = signal['main_signal']
            if main['type'] == dominant_direction:
                message += f"   {signal['timeframe']} (main): {main['type']} @ {main['entry']} "
                message += f"(Conf: {self.format_confidence(main['confidence'])})\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        message += f"   üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {dominant_direction}\n"
        message += f"   üìà –ü—Ä–æ—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(parsed_signals['simple'])}\n"
        message += f"   üîÑ –°–ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(parsed_signals['complex'])}\n"
        message += f"   ‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(corrections)}\n"
        
        return message

    def ask_user_confirmation(self) -> bool:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        if not TELEGRAM_AVAILABLE:
            print("‚ùå Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return False
        
        while True:
            response = input(f"\nüì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ {self.ticker} –≤ Telegram? (y/n): ").strip().lower()
            if response in ['y', 'yes', '–¥–∞']:
                return True
            elif response in ['n', 'no', '–Ω–µ—Ç']:
                return False
            else:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –¥–∞ –∏–ª–∏ 'n' –¥–ª—è –Ω–µ—Ç")

    def send_to_telegram(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not TELEGRAM_AVAILABLE or telegram_bot is None:
            print("‚ùå Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ telegram_bot
            telegram_bot.send_message(message)
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False

    def save_to_file(self, parsed_signals: Dict, dominant_direction: str, corrections: List[Dict], opposite_mains: List[Dict], response_time: float) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤ Google Drive"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            from storage import LocalStorage, DriveStorage
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (—Ñ–æ—Ä–º–∞—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º)
            now = datetime.now()
            timestamp = now.strftime("%H%M%S")
            datestamp = now.strftime("%Y%m%d")
            timeframes_str = "-".join(self.timeframes)
            
            filename = f"{self.ticker}_{timeframes_str}_{timestamp}_{datestamp}.txt"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ç –∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç —á—Ç–æ –∏ –¥–ª—è Telegram, –Ω–æ –±–µ–∑ HTML —Ä–∞–∑–º–µ—Ç–∫–∏
            content = self.format_telegram_message(parsed_signals, dominant_direction, corrections, opposite_mains, response_time)
            
            # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            clean_content = content.replace('<b>', '').replace('</b>', '')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            file_content = f"""# –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
# –¢–∏–∫–µ—Ä: {self.ticker}
# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(self.timeframes)}
# –î–∞—Ç–∞: {now.strftime('%Y-%m-%d %H:%M:%S')}
# –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: {response_time}—Å
{"="*60}

{clean_content}

{"="*60}
# –§–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ hedge analyzer
# –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {now.strftime('%Y-%m-%d %H:%M:%S')}
"""
            
            # 1) –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É HEDGE.BOT.HISTORY/{TICKER}/
            local = LocalStorage("HEDGE.BOT.HISTORY")
            filepath = local.write_text(self.ticker, filename, file_content)
            print(f"üíæ –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
            # self._compress_file(filepath)
            
            # 2) –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Google Drive (service account only)
            import os
            if os.getenv("GDRIVE_UPLOAD", "0") == "1":
                drive = DriveStorage(enabled=True)
                try:
                    folder_id = drive.ensure_folder("HEDGE.BOT.HISTORY", self.ticker)
                    if folder_id:
                        file_id = drive.upload_file(filepath, folder_id)
                        if file_id:
                            print(f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive, file_id={file_id}")
                        else:
                            print("‚ö†Ô∏è Google Drive –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–æ—à–∏–±–∫–∞)")
                    else:
                        print("‚ö†Ô∏è Google Drive –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (–æ—à–∏–±–∫–∞)")
                except Exception as e:
                    print(f"GDRIVE: upload skipped due to error ‚Üí {e}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª: {e}")
            return False
    
    def _compress_file(self, filepath: Path) -> bool:
        """–°–∂–∏–º–∞–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é gzip –∏ —É–¥–∞–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª"""
        try:
            import gzip
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = filepath.read_text(encoding='utf-8')
            
            # –°–∂–∏–º–∞–µ–º
            compressed_path = filepath.with_suffix(filepath.suffix + '.gz')
            with gzip.open(compressed_path, 'wt', encoding='utf-8') as f:
                f.write(content)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            filepath.unlink()
            
            original_size = len(content.encode('utf-8'))
            compressed_size = compressed_path.stat().st_size
            compression_ratio = original_size / compressed_size
            
            print(f"üóúÔ∏è –§–∞–π–ª —Å–∂–∞—Ç: {filepath.name} -> {compressed_path.name}")
            print(f"   –°–∂–∞—Ç–∏–µ: {compression_ratio:.1f}x ({original_size}–± -> {compressed_size}–±)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False

    def parse_signals(self, data: List[Dict]) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç —Å–∏–≥–Ω–∞–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∏ —Å–ª–æ–∂–Ω—ã–µ"""
        simple_signals = []  # –°–∏–≥–Ω–∞–ª—ã –±–µ–∑ main/correction
        complex_signals = []  # –°–∏–≥–Ω–∞–ª—ã —Å main/correction
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(data, list):
            print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –ø–æ–ª—É—á–µ–Ω {type(data)}: {data}")
            return {'simple': simple_signals, 'complex': complex_signals}
        
        for i, signal_data in enumerate(data):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            if not isinstance(signal_data, dict):
                print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç {i} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(signal_data)} = {signal_data}")
                continue
                
            timeframe = signal_data.get('timeframe')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            if 'main_signal' in signal_data and 'correction_signal' in signal_data:
                # –°–ª–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                complex_signals.append({
                    'timeframe': timeframe,
                    'pair': signal_data.get('pair'),
                    'current_price': signal_data.get('current_price'),
                    'main_signal': signal_data['main_signal'],
                    'correction_signal': signal_data['correction_signal']
                })
            else:
                # –ü—Ä–æ—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª
                simple_signals.append({
                    'timeframe': timeframe,
                    'pair': signal_data.get('pair'),
                    'signal': signal_data.get('signal'),
                    'entry_price': signal_data.get('entry_price'),
                    'take_profit': signal_data.get('take_profit'),
                    'stop_loss': signal_data.get('stop_loss'),
                    'confidence': signal_data.get('confidence'),
                    'risk_reward': signal_data.get('risk_reward'),
                    'current_price': signal_data.get('current_price')
                })
        
        return {'simple': simple_signals, 'complex': complex_signals}

    def determine_dominant_direction(self, parsed_signals: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        all_directions = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal in parsed_signals['simple']:
            direction = signal.get('signal')
            if direction:
                all_directions.append(direction)
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ main_signal —Å–ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal in parsed_signals['complex']:
            main_direction = signal.get('main_signal', {}).get('type')
            if main_direction:
                all_directions.append(main_direction)
        
        if not all_directions:
            return "–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–û"
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction_counts = Counter(all_directions)
        dominant = direction_counts.most_common(1)[0][0]
        
        return dominant

    def find_opposite_main_signals(self, parsed_signals: Dict, dominant_direction: str) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ç—Ä–µ–Ω–¥–æ–≤—ã–µ main —Å–∏–≥–Ω–∞–ª—ã - —Å–∏–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        opposite_mains = []
        
        for signal in parsed_signals['complex']:
            main_signal = signal.get('main_signal', {})
            main_direction = main_signal.get('type')
            
            # –ï—Å–ª–∏ main —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–µ–Ω –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–º—É - —ç—Ç–æ —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            if main_direction and main_direction != dominant_direction:
                opposite_mains.append({
                    'timeframe': signal['timeframe'],
                    'direction': main_direction,
                    'entry_price': main_signal.get('entry'),
                    'take_profit': main_signal.get('tp'),
                    'stop_loss': main_signal.get('sl'),
                    'confidence': main_signal.get('confidence'),
                    'risk_reward': main_signal.get('risk_reward')
                })
        
        return opposite_mains

    def find_correction_trades(self, parsed_signals: Dict, dominant_direction: str) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏"""
        corrections = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        for signal in parsed_signals['complex']:
            correction_signal = signal.get('correction_signal', {})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if correction_signal.get('type'):
                corrections.append({
                    'timeframe': signal['timeframe'],
                    'type': 'CORRECTION',
                    'direction': correction_signal.get('type'),
                    'entry_price': correction_signal.get('entry'),
                    'take_profit': correction_signal.get('tp'),
                    'stop_loss': correction_signal.get('sl'),
                    'confidence': correction_signal.get('confidence'),
                    'risk_reward': correction_signal.get('risk_reward'),
                    'current_price': signal.get('current_price')
                })
        
        return corrections

    def calculate_potentials_to_levels(self, correction: Dict, parsed_signals: Dict, dominant_direction: str) -> List[Dict]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º—É –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        correction_price = correction['entry_price']
        if not correction_price:
            return []
        
        potential_levels = []
        timeframe_hierarchy = ['1h', '4h', '1d']
        
        try:
            current_tf_index = timeframe_hierarchy.index(correction['timeframe'])
        except ValueError:
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–º—É)
        target_direction = 'UP' if dominant_direction == 'SHORT' else 'DOWN'
        
        # –ò—â–µ–º —É—Ä–æ–≤–Ω–∏ –≤ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
        for i in range(current_tf_index + 1, len(timeframe_hierarchy)):
            target_tf = timeframe_hierarchy[i]
            
            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ entry_price –∏ stop_loss –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
            for signal in parsed_signals['simple']:
                if signal['timeframe'] == target_tf:
                    levels = [
                        ('entry', signal.get('entry_price')),
                        ('sl', signal.get('stop_loss'))
                    ]
                    
                    for level_type, level_value in levels:
                        if level_value and level_value != correction_price:
                            direction = 'UP' if level_value > correction_price else 'DOWN'
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –Ω—É–∂–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
                            if direction == target_direction:
                                distance = abs(level_value - correction_price)
                                potential_percent = (distance / correction_price) * 100
                                
                                potential_levels.append({
                                    'timeframe': target_tf,
                                    'level_type': level_type,
                                    'level_value': level_value,
                                    'distance': distance,
                                    'potential_percent': round(potential_percent, 2),
                                    'direction': direction
                                })
            
            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ entry –∏ stop_loss –≤ main_signal —Å–ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            for signal in parsed_signals['complex']:
                if signal['timeframe'] == target_tf:
                    main_signal = signal.get('main_signal', {})
                    
                    levels = [
                        ('entry', main_signal.get('entry')),
                        ('sl', main_signal.get('sl'))
                    ]
                    
                    for level_type, level_value in levels:
                        if level_value and level_value != correction_price:
                            direction = 'UP' if level_value > correction_price else 'DOWN'
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –Ω—É–∂–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
                            if direction == target_direction:
                                distance = abs(level_value - correction_price)
                                potential_percent = (distance / correction_price) * 100
                                
                                potential_levels.append({
                                    'timeframe': target_tf,
                                    'level_type': level_type,
                                    'level_value': level_value,
                                    'distance': distance,
                                    'potential_percent': round(potential_percent, 2),
                                    'direction': direction
                                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É (1h -> 4h -> 1d), –∑–∞—Ç–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        tf_order = {'1h': 1, '4h': 2, '1d': 3}
        potential_levels.sort(key=lambda x: (tf_order.get(x['timeframe'], 4), x['distance']))
        
        return potential_levels[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ 2-3 –±–ª–∏–∂–∞–π—à–∏—Ö

    def process(self, ask_telegram=True):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –º—É–ª—å—Ç–∏-—Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        raw_data, response_time = self.get_multi_signals()
        if not raw_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API")
            return None
        
        # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª—ã
        parsed_signals = self.parse_signals(raw_data)

        print(f"üìä <b>–ê–Ω–∞–ª–∏–∑: {self.ticker}</b>")
        print("--------------------------------------------------")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: {response_time}—Å")
        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {self.ticker}:")
        print(f"–ü—Ä–æ—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(parsed_signals['simple'])}")
        print(f"–°–ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(parsed_signals['complex'])}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        dominant_direction = self.determine_dominant_direction(parsed_signals)
        print(f"\nüéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {dominant_direction}")
        
        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print(f"\nüìà <b>–ü–†–û–°–¢–´–ï –°–ò–ì–ù–ê–õ–´:</b>")
        for signal in parsed_signals['simple']:
            print(f"   {signal['timeframe']}: {signal['signal']} @ {signal['entry_price']} "
                  f"(TP: {signal['take_profit']}, SL: {signal['stop_loss']}, "
                  f"Conf: {self.format_confidence(signal['confidence'])})")
        
        print(f"\nüîÑ <b>–°–õ–û–ñ–ù–´–ï –°–ò–ì–ù–ê–õ–´:</b>")
        for signal in parsed_signals['complex']:
            main = signal['main_signal']
            corr = signal['correction_signal']
            print(f"   {signal['timeframe']}:")
            print(f"      Main: {main['type']} @ {main['entry']} "
                  f"(TP: {main['tp']}, SL: {main['sl']}, Conf: {self.format_confidence(main['confidence'])})")
            print(f"      Correction: {corr['type']} @ {corr['entry']} "
                  f"(TP: {corr['tp']}, SL: {corr['sl']}, Conf: {self.format_confidence(corr['confidence'])})")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ç–∏–≤–æ—Ç—Ä–µ–Ω–¥–æ–≤—ã–µ main —Å–∏–≥–Ω–∞–ª—ã (—Å–∏–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏)
        opposite_mains = self.find_opposite_main_signals(parsed_signals, dominant_direction)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ç—Ä–µ–Ω–¥–æ–≤—ã–µ main —Å–∏–≥–Ω–∞–ª—ã
        if opposite_mains:
            print(f"\nüö® <b>–í–ê–ñ–ù–´–ï –ü–†–û–¢–ò–í–û–¢–†–ï–ù–î–û–í–´–ï MAIN –°–ò–ì–ù–ê–õ–´</b> ({len(opposite_mains)} –Ω–∞–π–¥–µ–Ω–æ):")
            for signal in opposite_mains:
                print(f"   {signal['timeframe']}: {signal['direction']} @ {signal['entry_price']} "
                      f"{self.format_confidence(signal['confidence'])} - –°–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ç–∏–≤ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ {dominant_direction}")
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        corrections = self.find_correction_trades(parsed_signals, dominant_direction)
        
        if corrections:
            print(f"\n‚ö†Ô∏è  <b>–ö–û–†–†–ï–ö–¶–ò–û–ù–ù–´–ï –°–î–ï–õ–ö–ò</b> ({len(corrections)} –Ω–∞–π–¥–µ–Ω–æ):")
            
            for i, correction in enumerate(corrections, 1):
                print(f"\n   üìç –ö–æ—Ä—Ä–µ–∫—Ü–∏—è #{i} ({correction['timeframe']}, {correction['type']}):")
                print(f"      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {correction['direction']} "
                      f"(–ø—Ä–æ—Ç–∏–≤ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ {dominant_direction})")
                print(f"      –í—Ö–æ–¥: {correction['entry_price']}")
                print(f"      TP: {correction['take_profit']}")
                print(f"      SL: {correction['stop_loss']}")
                print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.format_confidence(correction['confidence'])}")
                print(f"      R/R: {correction['risk_reward']}")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—ã
                potentials = self.calculate_potentials_to_levels(correction, parsed_signals, dominant_direction)
                
                if potentials:
                    print(f"      \n      üéØ <b>–ü–û–¢–ï–ù–¶–ò–ê–õ–´ –ö –£–†–û–í–ù–Ø–ú –ö–†–£–ü–ù–´–• –¢–§:</b>")
                    for j, pot in enumerate(potentials[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
                        print(f"         {j}. {pot['timeframe']} ({pot['level_type']}): "
                              f"{pot['level_value']} = {pot['potential_percent']}% "
                              f"({pot['direction']})")
                else:
                    print(f"      ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤")
        
        else:
            print(f"\n‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            print(f"   –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é: {dominant_direction}")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        print(f"\nüöÄ –û–°–ù–û–í–ù–´–ï –°–ò–ì–ù–ê–õ–´ –ü–û –î–û–ú–ò–ù–ò–†–£–Æ–©–ï–ú–£ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Æ ({dominant_direction}):")
        
        # –ò–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal in parsed_signals['simple']:
            if signal['signal'] == dominant_direction:
                print(f"   {signal['timeframe']}: {signal['signal']} @ {signal['entry_price']} "
                      f"(Conf: {self.format_confidence(signal['confidence'])})")
        
        # –ò–∑ main —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–ª–æ–∂–Ω—ã—Ö
        for signal in parsed_signals['complex']:
            main = signal['main_signal']
            if main['type'] == dominant_direction:
                print(f"   {signal['timeframe']} (main): {main['type']} @ {main['entry']} "
                      f"(Conf: {self.format_confidence(main['confidence'])})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª (–≤—Å–µ–≥–¥–∞)
        self.save_to_file(parsed_signals, dominant_direction, corrections, opposite_mains, response_time)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ask_telegram=True)
        if ask_telegram:
            if self.ask_user_confirmation():
                telegram_message = self.format_telegram_message(parsed_signals, dominant_direction, corrections, opposite_mains, response_time)
                self.send_to_telegram(telegram_message)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ
        return {
            'parsed_signals': parsed_signals,
            'dominant_direction': dominant_direction,
            'corrections': corrections,
            'opposite_mains': opposite_mains,
            'response_time': response_time
        }


def test_multiple_tickers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Å –≥—Ä—É–ø–ø–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)"""
    results = []  # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ {len(test_tickers)} —Ç–∏–∫–µ—Ä–æ–≤: {', '.join(test_tickers)}")
    print("="*80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for ticker in test_tickers:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑: {ticker}")
        print("-"*50)
        
        analyzer = MultiSignalAnalyzer(ticker)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (ask_telegram=False)
        result = analyzer.process(ask_telegram=False)
        
        if not result:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {ticker}")
            continue
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é  
        print(f"   üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {result['dominant_direction']}")
        print(f"   üìà –ü—Ä–æ—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(result['parsed_signals']['simple'])}")
        print(f"   üîÑ –°–ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(result['parsed_signals']['complex'])}")
        print(f"   ‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(result['corrections'])}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        results.append({
            'ticker': ticker,
            'analyzer': analyzer,
            'parsed_signals': result['parsed_signals'],
            'dominant_direction': result['dominant_direction'],
            'corrections': result['corrections'],
            'opposite_mains': result['opposite_mains'],
            'response_time': result.get('response_time', 0.0)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        })
    
    print(f"\n{'='*80}")
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(results)} —Ç–∏–∫–µ—Ä–æ–≤")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –æ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if results and ask_multiple_telegram_confirmation(results):
        send_multiple_to_telegram(results)
        
    print(f"{'='*80}")

def test_multiple_tickers_batch():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    results = []  # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    
    print(f"üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {len(test_tickers)} —Ç–∏–∫–µ—Ä–æ–≤: {', '.join(test_tickers)}")
    print("="*80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for ticker in test_tickers:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑: {ticker}")
        print("-"*50)
        
        analyzer = MultiSignalAnalyzer(ticker)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (ask_telegram=False)
        result = analyzer.process(ask_telegram=False)
        
        if not result:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {ticker}")
            continue
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é  
        print(f"   üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {result['dominant_direction']}")
        print(f"   üìà –ü—Ä–æ—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(result['parsed_signals']['simple'])}")
        print(f"   üîÑ –°–ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(result['parsed_signals']['complex'])}")
        print(f"   ‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(result['corrections'])}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        results.append({
            'ticker': ticker,
            'analyzer': analyzer,
            'parsed_signals': result['parsed_signals'],
            'dominant_direction': result['dominant_direction'],
            'corrections': result['corrections'],
            'opposite_mains': result['opposite_mains'],
            'response_time': result.get('response_time', 0.0)
        })
    
    print(f"\n{'='*80}")
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(results)} —Ç–∏–∫–µ—Ä–æ–≤")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    if results:
        print(f"üì§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")
        send_multiple_to_telegram(results)
        
    print(f"{'='*80}")

def ask_multiple_telegram_confirmation(results: List[Dict]) -> bool:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ä–∞–º"""
    if not TELEGRAM_AVAILABLE:
        print("‚ùå Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return False
    
    ticker_list = [result['ticker'] for result in results]
    
    while True:
        response = input(f"\nüì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ ({', '.join(ticker_list)}) –≤ Telegram? (y/n): ").strip().lower()
        if response in ['y', 'yes', '–¥–∞']:
            return True
        elif response in ['n', 'no', '–Ω–µ—Ç']:
            return False
        else:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –¥–∞ –∏–ª–∏ 'n' –¥–ª—è –Ω–µ—Ç")

def send_multiple_to_telegram(results: List[Dict]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ä–∞–º –≤ Telegram –ø–∞—á–∫–æ–π"""
    if not TELEGRAM_AVAILABLE or telegram_bot is None:
        print("‚ùå Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(results)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram...")
    
    success_count = 0
    for i, result in enumerate(results, 1):
        ticker = result['ticker']
        analyzer = result['analyzer']
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞  
            # (—Ñ–∞–π–ª —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ analyzer.process())
            message = analyzer.format_telegram_message(
                result['parsed_signals'], 
                result['dominant_direction'], 
                result['corrections'],
                result['opposite_mains'],
                result['response_time']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            telegram_bot.send_message(message)
            print(f"   ‚úÖ {i}/{len(results)} - {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            success_count += 1
            
        except Exception as e:
            print(f"   ‚ùå {i}/{len(results)} - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {ticker}: {e}")
    
    print(f"\nüéâ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(results)} —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ç–∏–∫–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    print("üîç MultiSignal Analyzer")
    print("="*40)
    print("1. –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞")
    print(f"2. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ {test_tickers}")
    print("3. –í—ã—Ö–æ–¥")
    
    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ").strip()
        
        if choice == "1":
            ticker = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, AVAXUSDT): ").strip().upper()
            if ticker:
                analyzer = MultiSignalAnalyzer(ticker)
                analyzer.process()
            break
            
        elif choice == "2":
            test_multiple_tickers()
            break
            
        elif choice == "3":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import sys
    
    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if len(sys.argv) > 1 and sys.argv[1] == "--batch":
        test_multiple_tickers_batch()
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        interactive_mode()